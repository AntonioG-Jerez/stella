from stdirs import *
from numpy import *
from pylab import *
from struct import *
from scipy import *
from matplotlib import *
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.ticker import MultipleLocator
from matplotlib.ticker import AutoMinorLocator
from matplotlib.ticker import LinearLocator, FixedLocator, FormatStrFormatter
import matplotlib.pyplot as plt
import matplotlib.animation as manimation
from scipy.io import netcdf
plt.rcParams.update({'font.size': 28})
plt.rcParams['lines.linewidth'] = 2

import tabCompleter

from plotbox import *
from tabCompleter import *
import struct
import physcon as pc
import time
from os import listdir
from stella_read import *



def kspectra_movie(case):
    
    from stella_plots import movie_2d

    phi2_vs_kx_ky, k_x, k_y, n_time =\
                  phi2_vs_kxky(case), kx(case)[0], ky(case)[0], time(case)[1]
    
    phi2max = np.arange(n_time,dtype=float)
    phi2min = np.arange(n_time,dtype=float)
    
    for i in range(n_time):
        phi2max[i] = np.absolute(phi2_vs_kx_ky[i,:,:].max())
        
    phi2min[:] = 0.0
    ylabel = '$k_x$'
    xlabel = '$k_y$'
    title  = '$|\\varphi(k_x, k_y)|^2$'

    print(shape(phi2_vs_kx_ky))
    print(shape(k_x), shape(k_y), shape(phi2min), shape(phi2max), n_time)

    movie_file = outdir(case) + '/phi2_vs_kxky.mp4'
    
    movie_2d(phi2_vs_kx_ky, k_y, k_x, phi2min,\
             phi2max, n_time-1, movie_file, xlabel, ylabel, title,cmp='YlGnBu')


def omega(case, last=False, view=True, yrange=None, xrange=None):
    # Note that:
    # time   ky   kx   Re[om]   Im[om]   Re[omavg]  Im[omavg]
    datafile = outfile(case, quant='omega')
    n_time   = time(case)[1] # Including t=0
    n_ky     = ky(case)[1]
    n_kx     = kx(case)[1]

    data     = loadtxt(datafile, dtype='float').reshape(n_time-1, n_kx, n_ky, 7)

    if view:
        pl2y(ky(case)[0], y1data=abs(data[n_time - 2, 0,:,3]), y2data=data[n_time - 2, 0,:,4],\
             xlabel='$k_y\\rho_{i}$', ylabel='$\\omega a/v_{\mathrm{th},\mathrm{i}}$',\
             key1='$a\\Re(\\omega)/v_{\mathrm{th},\mathrm{i}}$',\
             key2='$a\\Im(\\omega)/v_{\mathrm{th},\mathrm{i}}$', xrange=xrange,\
             yrange=yrange,fig_size=(8.5, 7.5), wp=1, ax=None, mkt="o", mkc='red',\
             title="$k_x="+str(kx(case)[0][0])+"$",\
             hline1=None, hline2=None, vshadow=None, ls1=1, ls2=2)

        if n_kx == 1 and n_ky > 1:
            # The evolution of omega(ky, t) can be represented
            t      = time(case)[0][1:]
            kyrhoi = ky(case)[0]
            ky_re  = data[:, 0,:,3]
            ky_im  = data[:, 0,:,4]
            [X,Y]  = meshgrid(t, kyrhoi)
            Z      = ky_im.T

            surf(X, Y, Z, xlabel='$t$', ylabel='$k_y\\rho_{i}$',\
                 zlabel='$a\\Im(\\omega)/v_{\mathrm{th},\mathrm{i}}$',\
                 title="$k_x="+str(kx(case)[0][0])+"$", zrange=yrange, ax=None)


        if n_kx == 1 and n_ky == 1:
            # The evolution of omega(t) can be represented
            t      = time(case)[0][1:]
            kyrhoi = ky(case)[0]
            om_re  = data[:, 0,0,3]
            om_im  = data[:, 0,0,4]

            xlims = [t.min(), t.max()]
            ylims = [min(om_im.min(), abs(om_re).min())*1.05, max(om_im.max(), abs(om_re).max())*1.05]
            pl2y(t, abs(om_re), om_im, xlabel='$t$', ylabel='$\\omega a/v_{\mathrm{th},\mathrm{i}}$',\
                 title="$(k_x, k_y)=("+str(kx(case)[0][0])+", " + str(ky(case)[0][0])+")$",\
                 xrange=xlims, yrange=ylims,\
                 key1='$a\\Re(\\omega)/v_{\mathrm{th},\mathrm{i}}$',\
                 key2='$a\\Im(\\omega)/v_{\mathrm{th},\mathrm{i}}$',\
                 ax=None)

    show()
            
    if last:
        return data[n_time-2, :, :, :]
    else:
        return data


def phi(case, yrange=None, xrange=None):
    datafile    = outfile(case, quant='final_fields')
    
    vzed, nzed, iz0  = zed(case)[0], zed(case)[1], zed(case)[2]
    n_ky        = ky(case)[1]
    n_kx        = kx(case)[1]
    data        = loadtxt(datafile, dtype='float').reshape(nzed, n_kx, n_ky, 9)

    if n_kx == 1 and n_ky == 1:
        phi_re  = data[:, 0,0,4]
        phi_im  = data[:, 0,0,5]

        xlims = [vzed.min()*pi, vzed.max()*pi]
        ylims = [min(phi_im.min(), phi_re.min()), max(phi_im.max(), abs(phi_re).max())]
        
        pl2y(vzed*pi, phi_re, phi_im, xlabel='$\\zeta$',\
             ylabel='$\\tilde{\\varphi}(\\zeta)$',\
             title="$(k_x, k_y)=("+str(kx(case)[0][0])+", " + str(ky(case)[0][0])+")$",\
             xrange=xlims, yrange=ylims,\
             key1='$\\Re(\\tilde{\\varphi})(\\zeta)$',\
             key2='$\\Im(\\tilde{\\varphi})(\\zeta)$',\
             ax=None)        
        show()

def vmecgeo(case):
    # Function to read and represent geometric quantities

    zeta  = zed(case)[0]
    quant = geo(case)


    # Labels
    bmag     = '$B/B_{\mathrm{ref}}$'
    gradpar  = '$L_{\\mathrm{ref}}\\nabla_{\|} z$'
    gbdrift  = '$2B_{\\mathrm{ref}}L_{\mathrm{ref}}\\mathbf{B}\\times\\nabla B\\cdot\\nabla y/B^3$'
    gbdrift0 = '$\\hat{s}2B_{\mathrm{ref}}L_{\mathrm{ref}}\\mathbf{B}\\times\\nabla B\\cdot\\nabla x/B^3$'
    cdrift   = '$2B_{\mathrm{ref}}L_{\mathrm{ref}}\\mathbf{B}\\times\mathbf{\kappa}\\cdot\\nabla y/B^2$'
    cdrift0  = '$\\hat{s}2B_{\mathrm{ref}}L_{\mathrm{ref}}\\mathbf{B}\\times\\kappa\\cdot\\nabla x/B^2$'

    # Figures and axes
    
    fig = plt.figure(figsize=(18, 12))
    fig.subplots_adjust(left=0.1, wspace=0.35)
    
    ax1 = fig.add_subplot(231)
    ax2 = fig.add_subplot(232)
    ax3 = fig.add_subplot(233)
    ax4 = fig.add_subplot(234)
    ax5 = fig.add_subplot(235)
    ax6 = fig.add_subplot(236)


    plxy(zeta, quant[0], xlabel='$\\zeta$', ylabel=bmag,      title='\\texttt{bmag}'   , ax=ax1)
    plxy(zeta, quant[1], xlabel='$\\zeta$', ylabel=gradpar,   title='\\texttt{gradpar}', ax=ax2)
    plxy(zeta, quant[2], xlabel='$\\zeta$', ylabel=gbdrift,   title='\\texttt{gbdrift}', ax=ax3)
    plxy(zeta, quant[3], xlabel='$\\zeta$', ylabel=gbdrift0,  title='\\texttt{gbdrift0}',ax=ax4)
    plxy(zeta, quant[4], xlabel='$\\zeta$', ylabel=cdrift,    title='\\texttt{cdrift}',  ax=ax5)
    plxy(zeta, quant[5], xlabel='$\\zeta$', ylabel=cdrift0,   title='\\texttt{cdrift0}', ax=ax6)    

    fig2 = plt.figure(figsize=(18, 6))
    fig2.subplots_adjust(left=0.1, wspace=0.35)
    
    ax7 = fig2.add_subplot(131)
    ax8 = fig2.add_subplot(132)
    ax9 = fig2.add_subplot(133)

    gs2   = '$|\\nabla y|^2$'
    gds21 = '$\hat{s}^2\\nabla x\\cdot\\nabla y$'
    gds22 = '$\hat{s}^2|\\nabla x|^2$' 
    
    plxy(zeta, quant[6], xlabel='$\\zeta$', ylabel=gs2,      title='\\texttt{gds2}'   , ax=ax7)
    plxy(zeta, quant[7], xlabel='$\\zeta$', ylabel=gds21,    title='\\texttt{gds21}',   ax=ax8)
    plxy(zeta, quant[8], xlabel='$\\zeta$', ylabel=gds22,    title='\\texttt{gds22}',   ax=ax9)    


    show()

    
#    bmag, gradpar, gbdrift, gbdrift0, cvdrift, cvdrift0, gds2, gds21, gds22
    

def omega_max(case):
    return omega(case, last=True)[:,:,3].max(), omega(case, last=True)[:,:,4].max()


def ktkn(hpc=None, equil=None, process=False):

    hpc ='marconis'
    equil = 'w7xr003s'
    nLn = 21
    nLT = 21
    nky = 20
    run0=101
    irun=run0
    outfile=datadir() + 'marconis_w7xr003s_0101_0441.dat'

    omega_r     = empty((nLn, nLT, nky), dtype='float')
    omega_i     = empty((nLn, nLT, nky), dtype='float')
    omega_r_max = empty((nLn, nLT),     dtype='float')
    omega_i_max = empty((nLn, nLT),     dtype='float')    
    mLn         = empty((nLn, nLT),      dtype='float')
    mLT         = empty((nLn, nLT),      dtype='float')

    if process == True:
        # The runs are analyzed and the file compiling all the data
        # is written
        f = open(outfile, 'w')
        f.write('# (0) run   (1) i_Ln  (2) i_LT   (3) nprim   (4) tprim   '+\
                '(5) Max(Re(omega)) (6) Max(Im(omega))' + '\n')
        
        print("Writing file :", outfile + '\n')
        
        for i in arange (0, nLn):
            print('# (0) run   (1) i_Ln  (2) i_LT   (3) nprim   (4) tprim   '+\
                  '(5) Max(Re(omega)) (6) Max(Im(omega))')
            
            for j in arange (0, nLT):
                
                if hpc != None:
                    case  = hpc + '/' + equil + '_' + str(format8(irun))
                else:
                    case  = equil + '_' + str(format8(irun)) 
                    
                nprim = read_stella_float(case, 'fprim')[0]
                tprim = read_stella_float(case, 'tprim')[0]

                mLn[i, j]         = nprim
                mLT[i, j]         = tprim
                
                omega_r[i, j, :]  = omega(case, last=True)[0, :, 3]
                omega_i[i, j, :]  = omega(case, last=True)[0, :, 4]
                omega_r_max[i, j] = omega(case, last=True)[0, :, 3].max()
                omega_i_max[i, j] = omega(case, last=True)[0, :, 4].max()
                
                print(case, format8(i), format8(j), format2(nprim), format2(tprim),\
                      format2(omega_r[i, j, :].max()), format2(omega_i[i, j, :].max()))
                
                f.write(case+'\t'+str(format8(i))+'\t'+str(format8(j))+'\t'+\
                        str(format2(nprim))+'\t'+str(format2(tprim))+'\t'+\
                        str(format2(omega_r[i, j, :].max()))+'\t'+\
                        str(format2(omega_i[i, j, :].max()))+'\n')
                          
                irun = irun + 1

        f.close()

    if process == False:
        # Just read the existing file with all the data from the set of runs.
        print("Reading existing file : ", outfile)

        data = loadtxt(outfile, dtype='float', usecols=[3,4,5,6])
        mLn  = data[:,0].reshape((nLn, nLT))
        mLT  = data[:,1].reshape((nLn, nLT))
        omega_r_m = data[:,2].reshape((nLn, nLT))
        omega_i_m = data[:,3].reshape((nLn, nLT))      

        fig, ax = plt.subplots(figsize=(11.0, 8.4))
        col = ax.pcolormesh(mLn[:,0], mLT[0,:], omega_r_m.T, vmin=0, vmax=1.8)
#        CS1 = ax.contour((mLn[:,0], mLT[0,:], omega_r_m.T, levels=[0.1, 0.3, 0.5, 0.7, 0.9, 1.0], colors='white')
#        ax.clabel(CS1, inline=1, fontsize=14,  fmt='%1.1f', linewidths = 1.5)
        ax.set_xlabel('$a/L_{n_i}$')
        ax.set_ylabel('$a/L_{T_i}$')
        ax.xaxis.set_minor_locator(AutoMinorLocator(10))
        ax.yaxis.set_minor_locator(AutoMinorLocator(10))
        cbar=plt.colorbar(col)
        cbar.set_label('$\\Im({\\omega})^{\\textrm{max}}$')
        cbar.set_label('$a\\Im({\\omega})^{max}/v_{\\mathrm{th,i}}$')
        ax.set_aspect(1.0)
        title = '$k_{x}=0$; $0\\le k_{y}\le 10$'
        ax.set_title(title, y=1.02)
        ax.grid(color='grey', linestyle='-', linewidth=0.3)
                
                #        print mLn[:,0]
                #        print mLT[0,:]
                #        print omega_i_m
                #        mLT  = data[0,:].reshape(nLn, nLT)
                
                #    cmap(xdata=mLn[:,0], ydata=mLT[0,:], zdata=omega_r_m,\
                #         xlabel='$-a/L_{n_i}$', ylabel='$-a/L_{T_i}$', zlabel='$\\Im(\\omega)/v_{t}$')
                
        show()
